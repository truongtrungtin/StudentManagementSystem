# Generated by Django 3.1.7 on 2021-03-17 08:49

import FaceAPI.FireBase.StorageImage
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Classes',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('Name', models.CharField(max_length=255, unique=True)),
                ('StartDate', models.DateField(blank=True, default=django.utils.timezone.now, null=True)),
                ('IsActive', models.BooleanField(default=1)),
            ],
        ),
        migrations.CreateModel(
            name='ClassRoom',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('Name', models.CharField(blank=True, max_length=250, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Courses',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('Name', models.CharField(blank=True, max_length=255, null=True, unique=True)),
                ('Code', models.CharField(blank=True, max_length=250, null=True, unique=True)),
                ('Descriptions', models.CharField(blank=True, max_length=255, null=True)),
                ('IsActive', models.BooleanField(blank=True, default=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Faculties',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('Name', models.CharField(blank=True, max_length=255, null=True, unique=True)),
                ('Descriptions', models.CharField(blank=True, max_length=255, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Menus',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('Description', models.CharField(blank=True, max_length=250, null=True)),
                ('Url', models.CharField(blank=True, max_length=250, null=True)),
                ('user_type', models.CharField(choices=[(1, 'Admin'), (2, 'Staff'), (3, 'Trainer'), (4, 'Student')], default=1, max_length=10)),
            ],
        ),
        migrations.CreateModel(
            name='Slots',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('Slot', models.CharField(blank=True, max_length=250, null=True)),
                ('StartTime', models.TimeField(blank=True, default=None, null=True)),
                ('EndTime', models.TimeField(blank=True, default=None, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='StatusAttendance',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('Status', models.CharField(blank=True, max_length=250, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('user_type', models.CharField(choices=[(1, 'Admin'), (2, 'Staff'), (3, 'Trainer'), (4, 'Student')], default=1, max_length=10)),
                ('telephone', models.CharField(blank=True, max_length=15, null=True, unique=True)),
                ('birthday', models.DateField(blank=True, null=True)),
                ('address', models.CharField(blank=True, max_length=255, null=True)),
                ('Avatar', models.CharField(blank=True, default=FaceAPI.FireBase.StorageImage.GetImageDefaultAvatar, max_length=500, null=True)),
                ('code', models.CharField(blank=True, max_length=6, null=True)),
                ('faculty', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='API.faculties')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Trainers',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('Staff', models.UUIDField()),
                ('admin', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='SubMenus',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('Description', models.CharField(blank=True, max_length=250, null=True)),
                ('Url', models.CharField(blank=True, max_length=250, null=True)),
                ('Menu', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='API.menus')),
            ],
        ),
        migrations.CreateModel(
            name='Students',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('PersonId', models.UUIDField()),
                ('Staff', models.UUIDField()),
                ('Class', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='API.classes')),
                ('admin', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Staffs',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('admin', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Lessons',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('Name', models.CharField(blank=True, max_length=255, null=True)),
                ('Session', models.IntegerField(blank=True, null=True)),
                ('Course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='API.courses')),
            ],
        ),
        migrations.CreateModel(
            name='ImageStudent',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('FaceId', models.CharField(blank=True, max_length=250, null=True)),
                ('Url', models.CharField(blank=True, max_length=500, null=True)),
                ('Student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='API.students')),
            ],
        ),
        migrations.AddField(
            model_name='courses',
            name='faculty',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='API.faculties'),
        ),
        migrations.AddField(
            model_name='classes',
            name='faculty',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='API.faculties'),
        ),
        migrations.CreateModel(
            name='ClassCourse',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('IsActive', models.BooleanField(default=1)),
                ('Class', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='API.classes')),
                ('Course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='API.courses')),
                ('Trainer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='API.trainers')),
            ],
        ),
        migrations.CreateModel(
            name='Attendance',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('Date', models.DateField(blank=True, null=True)),
                ('ClassCourse', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='API.classcourse')),
                ('ClassRoom', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='API.classroom')),
                ('Lesson', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='API.lessons')),
                ('Slot', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='API.slots')),
                ('Status', models.ForeignKey(default='9042b79c791c4a7e993460704fddbe53', on_delete=django.db.models.deletion.CASCADE, to='API.statusattendance')),
                ('Student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='API.students')),
            ],
        ),
        migrations.CreateModel(
            name='Admin',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('admin', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
